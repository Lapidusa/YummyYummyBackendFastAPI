"""create ingredients table

Revision ID: a29aee5936f3
Revises: e6080fd0667b
Create Date: 2025-05-26 10:37:51.245316

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a29aee5936f3'
down_revision: Union[str, None] = 'e6080fd0667b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ingredients',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pizza_ingredients',
    sa.Column('pizza_id', sa.UUID(), nullable=False),
    sa.Column('ingredient_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ),
    sa.ForeignKeyConstraint(['pizza_id'], ['pizzas.id'], ),
    sa.PrimaryKeyConstraint('pizza_id', 'ingredient_id')
    )
    op.alter_column('pizzas', 'dough',
               existing_type=postgresql.ENUM('THICK_DOUGH', 'THIN_DOUGH', name='dough'),
               nullable=False)
    op.alter_column('product_replacements', 'product_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('product_replacements', 'group_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('product_variants', 'product_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('product_variants', 'size',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('product_variants', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('product_variants', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'category_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('replacement_groups', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('replacement_groups', 'max_choices',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('replacement_items', 'group_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('replacement_items', 'product_id',
               existing_type=sa.UUID(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('replacement_items', 'product_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('replacement_items', 'group_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('replacement_groups', 'max_choices',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('replacement_groups', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'category_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('product_variants', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('product_variants', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('product_variants', 'size',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('product_variants', 'product_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('product_replacements', 'group_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('product_replacements', 'product_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('pizzas', 'dough',
               existing_type=postgresql.ENUM('THICK_DOUGH', 'THIN_DOUGH', name='dough'),
               nullable=True)
    op.create_table('us_gaz',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seq', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('word', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stdword', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_us_gaz')
    )
    op.create_table('us_lex',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seq', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('word', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stdword', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_us_lex')
    )
    op.create_table('us_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('rule', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_us_rules')
    )
    op.create_table('pointcloud_formats',
    sa.Column('pcid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint('pc_schemaisvalid(schema)', name='pointcloud_formats_schema_check'),
    sa.CheckConstraint('pcid > 0 AND pcid < 65536', name='pointcloud_formats_pcid_check'),
    sa.PrimaryKeyConstraint('pcid', name='pointcloud_formats_pkey')
    )
    op.drop_table('pizza_ingredients')
    op.drop_table('ingredients')
    # ### end Alembic commands ###
